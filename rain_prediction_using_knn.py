# -*- coding: utf-8 -*-
"""Rain Prediction using KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F3oXVpCMe5v5vlV7TGajzhckB6ws4F-I
"""

import pandas as pd

df = pd.read_csv('Rain_Prediction_Data.csv')
df

df.shape

# Exploratory Data Analysis

df.describe()

df.columns

raininfo = df['RainTomorrow'].unique()
raininfo

type(raininfo)

rain_yn = df.groupby('RainTomorrow',sort=False).size()
rain_yn

type(rain_yn)

import matplotlib.pyplot as plt
plt.bar(raininfo,rain_yn,color = ['red','green'])
plt.xlabel('Rain Information')
plt.ylabel('Rain Prediction')
plt.title('Tomorrow Rain Prediction')
plt.show()

df.head(5)

x = df.iloc[:,[2,3,4,8,11,12,13,14,15,16,19,20]].values
y = df.iloc[:,23].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,random_state = 0)

print(x_train.shape)
print(x_test.shape)# 75:25

# Normalization using Min Max - 0 to 1
# It is done only for input
from sklearn.preprocessing import MinMaxScaler
s = MinMaxScaler()
x_train = s.fit_transform(x_train) # fit_transform for training
x_test = s.transform(x_test) # transform for testing

x_train

x_test

from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier(n_neighbors = 7)
model.fit(x_train,y_train)
y_pred = model.predict(x_test)
y_pred

y_test

from sklearn.metrics import accuracy_score,confusion_matrix
accuracy_score(y_pred,y_test)*100

confusion_matrix(y_pred,y_test)

model.score(x_test,y_test)*100

from sklearn.metrics import classification_report
print(classification_report(y_pred,y_test))

#x = df.iloc[:,[2,3,4,8,11,12,13,14,15,16,19,20]].values

ypred1 = model.predict(s.transform([[13.4,22.9,0.6,44,20,24,71,22,1007.7,1007.1,8,21.8]])) # Testing data

ypred1

ypred1 = model.predict(s.transform([[14.1,20.9,0,22,11,9,69,82,1012.2,1010.4,17.2,18.1]])) # Testing data

ypred1